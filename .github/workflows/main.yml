# Nome do seu workflow, que aparecerá na aba "Actions"
name: MLOps Pipeline - Test, Train, and Deploy

# Gatilhos: Define QUANDO este workflow deve rodar
on:
  # Roda em pushes para a branch principal
  push:
    branches: ["main"]

  # Roda em pull requests direcionados à branch principal
  pull_request:
    branches: ["main"]

  # Permite que você dispare o workflow manualmente pela interface do GitHub
  workflow_dispatch:

# Jobs: As tarefas a serem executadas
jobs:
  # --- Job 1: Testar o código ---
  test:
    name: "Rodar Testes com Pytest"
    runs-on: ubuntu-latest
    steps:
      # 1. Baixa o código do repositório para a máquina virtual
      - name: Checkout do código
        uses: actions/checkout@v4 # Versão atualizada

      - name: Grant write permissions
        run: sudo chown -R $USER:$USER $GITHUB_WORKSPACE

      # 2. Configura o ambiente Python
      - name: Configurar Python 3.11
        uses: actions/setup-python@v5 # Versão atualizada
        with:
          python-version: "3.11" # Alinhado com nosso ambiente local

      # 3. Instala as dependências a partir do arquivo requirements.txt
      - name: Instalar dependências
        working-directory: ./mlOps # CORREÇÃO: Define o diretório de trabalho
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Roda os testes
      - name: Rodar os testes com Pytest
        working-directory: ./mlOps # CORREÇÃO: Define o diretório de trabalho
        run: pytest

  # --- Job 2: Treinar o modelo ---
  train:
    name: "Treinar o Modelo"
    runs-on: ubuntu-latest
    needs: test # Este job só começa se o job 'test' for concluído com sucesso
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências
        working-directory: ./mlOps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Este passo executa o script de treinamento
      - name: Treinar Modelo
        working-directory: ./mlOps
        run: python train.py

  # --- Job 3: Construir e Enviar a Imagem Docker ---
  # build-and-push-docker-image:
  #  name: "Construir e Publicar Imagem Docker"
  # runs-on: ubuntu-latest
  # needs: train # Este job só começa se o job 'train' for concluído com sucesso
  # steps:
  #   - name: Checkout do código
  #    uses: actions/checkout@v4
#      - name: Login no Docker Hub
#       uses: docker/login-action@v3
#      with:
#       username: ${{ secrets.DOCKER_USER }}
#      password: ${{ secrets.DOCKER_PASSWORD }}

# - name: Construir e Enviar a Imagem
#  uses: docker/build-push-action@v5
# with:
#  context: ./mlOps # Assumindo que o Dockerfile está na raiz. Se estiver em /mlOps, mude para './mlOps'
# push: true
#tags: ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
